# Default values for face-api.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicas: 1

image:
  # Image is also available at the registry.connect.redhat.com/regulaforensics/face-api repository
  repository: regulaforensics/face-api
  # Overrides the image tag whose default is the chart appVersion.
  # '-gpu' tag requires nvidia gpu nodes
  # https://github.com/NVIDIA/k8s-device-plugin
  # Please mind, setting a '-gpu' tag also requires adding 'nvidia.com/gpu: 1' at the 'resources' section.
  tag: ~
  pullPolicy: Always
imagePullSecrets: []

nameOverride: ""
fullnameOverride: ""

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # Note, the "requests" section specifies the minimum resources required to run 1 pod with 1 worker on board.
  # Thus setting more workers would require to multiply resources respectively.
  # Also, the resources (both requests and limits) section is mandatory for autoscaling
  # limits:
  #   cpu: 2000m
  #   memory: 3Gi
  # requests:
  #   cpu: 1000m
  #   memory: 3Gi

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1001

podSecurityContext:
  fsGroup: 0

podAnnotations: {}

priorityClassName: ~

terminationGracePeriodSeconds: ~

lifecycle: {}
  # preStop:
  #   exec:
  #     command: ["/bin/sh", "-c", "sleep 45"]

nodeSelector: {}

affinity: {}

tolerations: []

topologySpreadConstraints: []

# FaceAPI pod disruption budget
podDisruptionBudget:
  enabled: false
  # PDB configuration
  config:
    # minAvailable and maxUnavailable cannot be both set
    maxUnavailable: 1
    minAvailable: ~

# Supply the name of existing secret with the regula.license file.
# You can load it to a k8s generic secret via the following command:
# `kubectl create secret generic faceapi-license -n <namespace> --from-file=regula.license`
#
# licenseSecretName: faceapi-license
licenseSecretName: ~
config:
  sdk:
    compare:
      limitPerImageTypes: 2
    logging:
      level: "INFO"

    detect:
      # scenarios:
      #   - scenario: AA
      #     quality:
      #       config:
      #         - name: Yaw
      #           range:
      #             - -5.0
      #             - 5.0
      #         - name: Pitch
      #           range:
      #             - -5.0
      #             - 5.0
      #         - name: Roll
      #           range:
      #             - -5.0
      #             - 5.0
      #     onlyCentralFace: true
      #   - scenario: BB
      #     attributes:
      #       config:
      #         - name: Age

    liveness:
      # checkFilters:
      #   config:
      #     - excludeChecks:
      #         - texture
      #         - electronicDevice
      #         - EyesClosed
      #       filter:
      #         platform:
      #         - ios

  service:
    webServer:
      port: 41101
      workers: 1
      timeout: 30

      demoApp:
        enabled: true

      cors:
        origins: "*"
        headers: "*"
        methods: "POST,PUT,GET,DELETE,PATCH,HEAD,OPTIONS"

      logging:
        level: "INFO"
        formatter: text

        access:
          console: true
          path: "logs/access/facesdk-reader-access.log"

        app:
          console: true
          path: "logs/app/facesdk-reader-app.log"

      metrics:
        enabled: false

      # We recommend to expose service to public via Ingress
      ssl:
        enabled: false
        # If enabled, supply the name of existing secret with key/cert files.
        # You can load it to a k8s tls secret via the following command:
        # `kubectl create secret tls certificates --key="tls.key" --cert="tls.crt"`
        # certificatesSecretName: certificates
        certificatesSecretName: ~
        # Specifies the version of the TLS (Transport Layer Security) protocol to use for secure connections within the application.
        # String type, accepts the following available versions of TLS: 1.0, 1.1, 1.2, 1.3
        tlsVersion: 1.2

    storage:
      type: fs
      # s3:
      #   accessKey: <AWS_ACCESS_KEY_ID>
      #   accessSecret: <AWS_SECRET_ACCESS_KEY>
      #   region: "us-east-1"
      #   secure: true
      #   endpointUrl: "https://s3.amazonaws.com"
      #   #  awsCredentialsSecretName overrides storage.s3.accessKey/s3.accessSecret values
      #   #  Supply the name of existing secret with AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY keys.
      #   #  You can load it to a k8s generic secret via the following command:
      #   #  `kubectl create secret generic aws-credentials -n <namespace> --from-literal=AWS_ACCESS_KEY_ID=<AWS_ACCESS_KEY_ID> --from-literal=AWS_SECRET_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY>`
      #   awsCredentialsSecretName: ~
      # gcs:
      #   #  Supply the name of existing secret with service account key gcs.json file.
      #   # You can load it to a k8s generic secret via the following command:
      #   #  `kubectl create secret generic gcs-credentials -n <namespace> --from-file=gcs_key.json=<path_to_key>`
      #   gcsKeyJsonSecretName: ~
      # az:
      #   connectionString: "<AZURE_STORAGE_CONNECTION_STRING>"
      #   #  connectionStringSecretName overrides storage.az.connectionString value
      #   #  Supply the name of existing secret with AZURE_STORAGE_CONNECTION_STRING key.
      #   #  You can load it to a k8s generic secret via the following command:
      #   #  `kubectl create secret generic az-credentials -n <namespace> --from-literal=AZURE_STORAGE_CONNECTION_STRING="<AZURE_STORAGE_CONNECTION_STRING>"`
      #   connectionStringSecretName: ~

    # Database section is required for liveness and/or search modules
    database:
      connectionString: ~
      # #  connectionStringSecretName overrides database.connectionString value
      # #  Supply the name of existing secret with SQL_CONNECTION_STRING key.
      # #  You can load it to a k8s generic secret via the following command:
      # #  `kubectl create secret generic database-credentials -n <namespace> --from-literal=SQL_CONNECTION_STRING=<SQL_CONNECTION_STRING>`
      # connectionStringSecretName: ~
      # connectionString examples:
      # connectionString: postgresql://<username>:<password>@127.0.0.1:5432/regula_faceapi_db
      # connectionString: mysql://username>:<password>@127.0.0.1:5432/regula_faceapi_db
      # connectionString: mariadb+pymysql:/username>:<password>@127.0.0.1:3306/regula_faceapi_db
      # connectionString: mysql+pymysql://username>:<password>@127.0.0.1:3306/regula_faceapi_db
      # connectionString: sqlite:///opt/regula/faceapi/regula_faceapi.db

    detectMatch:
      enabled: true
      results:
        location:
          folder: "/app/faceapi-detect-match/results"
          # bucket: "faceapi-detect-match" # storage type s3/gcs
          # container: "faceapi-detect-match" # storage type az
          prefix: "results"
        # Persistence is only applicable for the fs storage type
        persistence:
          # Enable persistent volume for storing processing results
          enabled: false
          # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes
          accessMode: ReadWriteMany
          # Volume size for logs
          size: 10Gi
          # If using a custom storageClass, pass name here
          storageClassName: ~
          # If defined, PVC must be created manually before volume will be bound
          existingClaim: ~

    liveness:
      enabled: false
      ecdhSchema: "default"
      hideMetadata: false
      protectPersonalInfo: false
      sessions:
        location:
          folder: "/app/faceapi-liveness/sessions"
          # bucket: "faceapi-liveness" # storage type s3/gcs
          # container: "faceapi-liveness" # storage type az
          prefix: "sessions"
        # Persistence is only applicable for the fs storage type
        persistence:
          # Enable persistent volume for storing processing results
          enabled: false
          # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes
          accessMode: ReadWriteMany
          # Volume size for logs
          size: 10Gi
          # If using a custom storageClass, pass name here
          storageClassName: ~
          # If defined, PVC must be created manually before volume will be bound
          existingClaim: ~

    search:
      enabled: false
      persons:
        location:
          folder: "/app/faceapi-search/persons"
          # bucket: "faceapi-search" # storage type s3/gcs
          # container: "faceapi-search" # storage type az
          prefix: "persons"
        # Persistence is only applicable for the fs storage type
        persistence:
          # Enable persistent volume for storing processing results
          enabled: false
          # https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes
          accessMode: ReadWriteMany
          # Volume size for logs
          size: 10Gi
          # If using a custom storageClass, pass name here
          storageClassName: ~
          # If defined, PVC must be created manually before volume will be bound
          existingClaim: ~

      threshold: 1.0

      vectorDatabase:
        type: milvus
        milvus:
          user: ""
          password: ""
          token: ""
          endpoint: "http://localhost:19530"
          consistency: "Bounded"
          reload: false
          index:
            type: "IVF_FLAT"
            params:
              nlist: 128
          search:
            type: "L2"
            params:
              nprobe: 5

env: []
# - name: ""
#   value: ""

# Mount additional volumes into faceapi pod.
extraVolumes: []
extraVolumeMounts: []

service:
  type: ClusterIP
  port: 80
  ## service annotations
  annotations: {}
  # Optionally assign a known public LB IP
  # loadBalancerIP: ~
  # LoadBalancerSourcesRange is a list of allowed CIDR values, which are combined with ServicePort to
  # set allowed inbound rules on the security group assigned to the master load balancer
  # loadBalancerSourceRanges:
  #   - "10.123.0.0/16"
  loadBalancerSourceRanges: []

ingress:
  enabled: false
  # The Ingress Class for the web Ingress (used only with Kubernetes v1.19 and above)
  # className: ""

  annotations: {}

  # The hostnames or hosts configuration for the web Ingress
  hosts: []
    # - faceapi.domain.com
  paths: []
    # - /
  pathType: Prefix

  # TLS configuration for the FaceAPI Ingress
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # The name of the service account to use.
  name: ~
  # Annotations to add to the service account
  annotations: {}

serviceMonitor:
  # Set this to `true` to create ServiceMonitor for Prometheus operator
  enabled: false
  namespace: ~
  interval: "30s"
  scrapeTimeout: "10s"
  # Additional labels that can be used so ServiceMonitor will be discovered by Prometheus
  additionalLabels: {}

livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 30
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5

readinessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 20
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: ~


###################################
# Subcharts
###################################

# NOTE
# The subcharts are used for the demonstration and Dev/Test purposes related to the `liveness` and `search` capabilities.
# We strongly recommend to deploy separate installations of the VectorDatabase (search) and DB (liveness/search) in Production.

# Configuration for milvus subchart
# For the advanced Milvus configuration, please referer to the official documentation.
# ref: https://github.com/zilliztech/milvus-helm/tree/master/charts/milvus
milvus:
  enabled: false

# Configuration for postgresql subchart
# For the advanced PostgreSQL configuration, please referer to the official documentation.
# ref: https://github.com/bitnami/charts/tree/main/bitnami/postgresql
postgresql:
  enabled: false
  auth:
    username: "regula"
    password: "Regulapasswd#1"
    database: "regula"
